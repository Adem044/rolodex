{"version":3,"sources":["components/notifications/Notifications.js","components/navBar/navBar.js","components/fullSize/FullSize.js","components/card/card.js","components/card/fullCardInfo.js","components/card-list/card-list.js","components/search-box/search-box.tsx","components/dropDownMenu/dropDownMenu.js","components/notifications/PopUp.js","App.js","index.js"],"names":["Notifications","deleteHandler","mode","value","useContext","NotifsContext","notificationMode","className","hidden","showDrop","added","length","onClick","map","fav","id","NotifDiv","type","alt","src","name","email","styled","div","props","NavBar","navItems","clicked","handleNotif","recentNotif","toggleMode","useState","active","setActive","location","useLocation","pathname","navBarClassName","items","from","opacity","fontSize","to","config","delay","item","style","Icon","data-notifs-count","ev","target","classList","contains","i","FullSize","closeFull","clickedImg","Card","isFav","monster","paraRef","useRef","ModeContext","setFav","duration","CardContainer","prevState","H2","addPadding","ref","css","h2","FullCardInfo","Id","useParams","monsters","updateMonsters","useEffect","fetch","then","response","json","user","find","mon","Number","filteredArr","Object","entries","filter","arr","background","borderRadius","key","slow","a","CardList","myFav","showDetails","setShowDetails","monst","tagName","includes","SearchBox","placeholder","handleChange","onChange","DropDownMenu","selected","PopUp","showPopUp","show","setShow","prevInput","current","setTimeout","clearTimeout","PopUpDiv","React","createContext","App","e","setState","searchField","cardClickHandler","showFull","prev","recent","state","favourites","splice","findIndex","showFavs","notifications","navItemHandler","handleSelected","sortBy","bool","handleDelete","h1Ref","createRef","JSON","parse","window","localStorage","getItem","document","addEventListener","querySelector","onclick","closest","setItem","this","sort","b","notifs","reduce","acc","cur","unshift","filteredMonsters","toLowerCase","appMode","Provider","val","path","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b535533e.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport \"./Notifications.css\";\r\nimport { NotifsContext } from \"../../App\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Notifications = ({ deleteHandler, mode }) => {\r\n  const value = useContext(NotifsContext);\r\n  const notificationMode =\r\n    mode === \"light\" ? \"notifications\" : \"notifications dark-notifications\";\r\n  return (\r\n    <div className={notificationMode} hidden={!value.showDrop}>\r\n      <h4>\r\n        Notifications <span>{value.added.length}</span>\r\n        <span className=\"delete-all\" onClick={deleteHandler}>\r\n          X\r\n        </span>\r\n      </h4>\r\n      {value.added.map((fav, id) => (\r\n        <NotifDiv className=\"notif\" key={id} type={fav.type}>\r\n          <img\r\n            alt=\"monster\"\r\n            src={`https://robohash.org/${fav.id}?set=set2&size=180x180`}\r\n          />\r\n          <div>\r\n            <h5>\r\n              {fav.name}\r\n              <span>{` (${fav.type})`}</span>\r\n            </h5>\r\n            <h6>{fav.email}</h6>\r\n          </div>\r\n        </NotifDiv>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n\r\nconst NotifDiv = styled.div`\r\n  background-color: ${(props) =>\r\n    props.type === \"removed\" ? \"tomato\" : \"rgba(179, 202, 145, 0.787)\"};\r\n`;\r\n","import React, { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport \"./navBar.css\";\nimport { Trail } from \"react-spring/renderprops\";\n\nimport Notifications from \"../notifications/Notifications\";\n\nfunction NavBar({\n  navItems,\n  clicked,\n  handleNotif,\n  recentNotif,\n  deleteHandler,\n  toggleMode,\n  mode,\n}) {\n  const [active, setActive] = useState(\"Monsters\");\n  const location = useLocation();\n\n  if (location.pathname !== \"/Favourites\") {\n    if (active !== \"Monsters\") {\n      setActive(\"Monsters\");\n    }\n  }\n  if (location.pathname === \"/Favourites\") {\n    if (active !== \"Favourites\") {\n      setActive(\"Favourites\");\n    }\n  }\n\n  const navBarClassName = mode === \"light\" ? \"nav-bar\" : \"nav-bar dark\";\n  return (\n    <div className={navBarClassName}>\n      <Trail\n        items={navItems}\n        from={{ opacity: 0, fontSize: \"20px\" }}\n        to={{ opacity: 1, fontSize: \"25px\" }}\n        config={{ delay: 500 }}\n      >\n        {(item, id) => (props) => (\n          <Link\n            className={active === item ? \"active\" : null}\n            style={props}\n            to={`/${item}`}\n            onClick={() => {\n              clicked(id);\n              setActive(item);\n            }}\n            key={id}\n          >\n            {item}\n          </Link>\n        )}\n      </Trail>\n      <Icon\n        data-notifs-count={recentNotif.length}\n        className={`${!recentNotif.length ? \"far\" : \"fas\"} fa-bell`}\n        onClick={(ev) => {\n          handleNotif(ev.target.classList.contains(\"fa-bell\"));\n        }}\n      >\n        <Notifications deleteHandler={deleteHandler} mode={mode} />\n      </Icon>\n      <div className=\"toggle-mode\">\n        <i\n          className={`${mode === \"light\" ? \"far fa-sun\" : \"fas fa-moon\"} mode`}\n          onClick={toggleMode}\n        ></i>\n        <span className=\"toggle\">\n          {mode === \"light\" ? \"Light Mode\" : \"Dark Mode\"}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default NavBar;\n\nconst Icon = styled.i`\n  &::after {\n    display: ${(props) =>\n      props[\"data-notifs-count\"] ? \"inline-block\" : \"none\"};\n  }\n`;\n","import React from \"react\";\r\nimport \"./FullSize.css\";\r\n\r\nconst FullSize = ({ closeFull, clickedImg }) => {\r\n  return (\r\n    <div className=\"show-full\" onClick={closeFull}>\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${clickedImg}?set=set2&size=180x180`}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullSize;\r\n","import React, { useState, useContext, useRef } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Spring, config } from \"react-spring/renderprops\";\r\nimport \"./card.styles.css\";\r\nimport { ModeContext } from \"../../App\";\r\n\r\nexport const Card = ({ clicked, isFav, monster: { id, name, email } }) => {\r\n  const paraRef = useRef(null);\r\n  const mode = useContext(ModeContext);\r\n  const [fav, setFav] = useState(isFav);\r\n\r\n  return (\r\n    <Spring\r\n      from={{ opacity: 0 }}\r\n      to={{ opacity: 1 }}\r\n      config={{ duration: 500 }}\r\n    >\r\n      {(props) => (\r\n        <CardContainer\r\n          style={props}\r\n          mode={mode}\r\n          className=\"card-container\"\r\n          onClick={(ev) => clicked(ev, id)}\r\n        >\r\n          <Icon\r\n            className={fav ? \"fas fa-bookmark\" : \"far fa-bookmark\"}\r\n            fav={fav}\r\n            onClick={() => {\r\n              setFav((prevState) => !prevState);\r\n            }}\r\n          ></Icon>\r\n          <img\r\n            alt=\"monster\"\r\n            src={`https://robohash.org/${id}?set=set2&size=180x180`}\r\n          />\r\n          <H2 addPadding={name.length < 18}>{name}</H2>\r\n          <p ref={paraRef}>{email}</p>\r\n        </CardContainer>\r\n      )}\r\n    </Spring>\r\n  );\r\n};\r\n\r\nconst Icon = styled.i`\r\n  ${(props) =>\r\n    props.fav &&\r\n    css`\r\n      top: -10px !important;\r\n      transition: top 0.15s ease-in !important;\r\n    `}\r\n`;\r\n\r\nconst H2 = styled.h2`\r\n  padding: ${(props) => props.addPadding && \"0 27px\"};\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  ${({ mode }) =>\r\n    mode !== \"light\" &&\r\n    css`\r\n      background-color: rgb(110, 110, 110);\r\n      border: 1px solid #95dada;\r\n    `}\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Spring, config } from \"react-spring/renderprops\";\r\n\r\nimport \"./fullCardInfo.css\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst FullCardInfo = ({ monster }) => {\r\n  const Id = useParams().id;\r\n\r\n  const [monsters, updateMonsters] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (Id) {\r\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((user) =>\r\n          updateMonsters(user.find((mon) => mon.id === Number(Id)))\r\n        );\r\n    }\r\n  }, [Id]);\r\n\r\n  const arr = Object.entries(Id && monsters ? monsters : monster);\r\n  const filteredArr = arr.filter((arr) => {\r\n    return arr[0] !== \"username\" && typeof arr[1] === \"string\";\r\n  });\r\n  return (\r\n    <Spring\r\n      // reset\r\n      // reverse\r\n      from={{ background: \"#95dada\", borderRadius: \"2%\" }}\r\n      to={{ background: \"thistle\", borderRadius: \"5%\" }}\r\n      config={(key) => (key === \"background\" ? config.slow : { duration: 500 })}\r\n    >\r\n      {(props) => (\r\n        <div style={props} className=\"full-card-container\">\r\n          <img\r\n            alt=\"monster\"\r\n            src={`https://robohash.org/${\r\n              Id && monsters ? monsters.id : monster.id\r\n            }?set=set2&size=180x180`}\r\n          />\r\n          <div className=\"infos\">\r\n            {filteredArr.map((a, i) => (\r\n              <h3 key={i}>\r\n                {a[0]}\r\n                <span>{a[1]}</span>\r\n              </h3>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Spring>\r\n  );\r\n};\r\n\r\nexport default FullCardInfo;\r\n","import React, { useState } from \"react\";\r\nimport { Card } from \"../card/card\";\r\nimport { useLocation, Route } from \"react-router-dom\";\r\nimport FullCardInfo from \"../card/fullCardInfo\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = ({ myFav, monsters, clicked }) => {\r\n  const [showDetails, setShowDetails] = useState(0);\r\n  let monst = monsters.find((mon) => mon.id === showDetails);\r\n  const location = useLocation();\r\n  return (location.pathname === \"/Favourites\" && myFav.length) ||\r\n    location.pathname !== \"/Favourites\" ? (\r\n    <div className=\"card-list\">\r\n      {showDetails\r\n        ? [\r\n            <h2 key=\"h1\" className=\"close\" onClick={() => setShowDetails(0)}>\r\n              X\r\n            </h2>,\r\n            <FullCardInfo key=\"card\" monster={monst} />,\r\n          ]\r\n        : monsters.map((monster) => {\r\n            return (\r\n              <Card\r\n                clicked={(ev, id) => {\r\n                  clicked(ev, id);\r\n                  if (\r\n                    ev.target.tagName !== \"IMG\" &&\r\n                    !ev.target.className.includes(\"fa-bookmark\")\r\n                  )\r\n                    setShowDetails(id);\r\n                }}\r\n                key={monster.id}\r\n                monster={monster}\r\n                isFav={myFav.includes(monster.id)}\r\n              />\r\n            );\r\n          })}\r\n    </div>\r\n  ) : (\r\n    <p>No Monsters Added to Favourites!</p>\r\n  );\r\n};\r\n","import React from \"react\";\n\nimport \"./search-box.styles.css\";\n\ninterface Props {\n  placeholder?: string;\n  handleChange: () => any;\n}\n\nexport const SearchBox: React.FC<Props> = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import React from \"react\";\r\nimport \"./dropDownMenu.css\";\r\n\r\nfunction DropDownMenu({ selected }) {\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <span className=\"sort\">Sort by</span>\r\n      <span>\r\n        <select\r\n          onChange={(ev) => {\r\n            selected(ev.target.value);\r\n          }}\r\n          name=\"sorted\"\r\n        >\r\n          <option value=\"default\">Default</option>\r\n          <option value=\"a-z\">A-Z</option>\r\n          <option value=\"z-a\">Z-A</option>\r\n        </select>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropDownMenu;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PopUp = ({ showPopUp }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const prevInput = useRef(showPopUp);\r\n\r\n  useEffect(() => {\r\n    let id = null;\r\n    if (prevInput.current < showPopUp) {\r\n      setShow(true);\r\n      id = setTimeout(() => {\r\n        setShow(false);\r\n      }, 1250);\r\n    } else {\r\n      setShow(false);\r\n    }\r\n    prevInput.current = showPopUp;\r\n    return () => clearTimeout(id);\r\n  }, [showPopUp]);\r\n\r\n  return (\r\n    show && (\r\n      <PopUpDiv>\r\n        <h4>Added to favourites</h4>\r\n      </PopUpDiv>\r\n    )\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n\r\nconst PopUpDiv = styled.div`\r\n  position: fixed;\r\n  z-index: 100;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  background-color: greenyellow;\r\n  border: 1px solid grey;\r\n  padding: 5px;\r\n  h4 {\r\n    margin: 0;\r\n  }\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport NavBar from \"./components/navBar/navBar\";\r\nimport FullSize from \"./components/fullSize/FullSize\";\r\nimport { CardList } from \"./components/card-list/card-list\";\r\nimport FullCardInfo from \"./components/card/fullCardInfo\";\r\nimport { SearchBox } from \"./components/search-box/search-box\";\r\nimport DropDownMenu from \"./components/dropDownMenu/dropDownMenu\";\r\nimport \"./App.css\";\r\nimport PopUp from \"./components/notifications/PopUp\";\r\n\r\nexport const NotifsContext = React.createContext({\r\n  added: [],\r\n  showDrop: false,\r\n});\r\n\r\nexport const ModeContext = React.createContext(\"\");\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.h1Ref = React.createRef();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: \"\",\r\n      showFull: false,\r\n      clickedImg: 0,\r\n      favourites: JSON.parse(window.localStorage.getItem(\"favs\")) || [],\r\n      showFavs: false,\r\n      sortBy: \"default\",\r\n      notifications: [],\r\n      recent: [],\r\n      showDrop: false,\r\n      mode: \"light\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"scroll\", () => {\r\n      if (this.state.showDrop) this.setState({ showDrop: false });\r\n    });\r\n    document.querySelector(\".App\").onclick = (ev) => {\r\n      if (!ev.target.closest(\".fa-bell\")) {\r\n        this.setState({ showDrop: false });\r\n      }\r\n    };\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((user) =>\r\n        this.setState({\r\n          monsters: user,\r\n        })\r\n      );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    window.localStorage.setItem(\"favs\", `[${this.state.favourites}]`);\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchField: e.target.value });\r\n  };\r\n\r\n  cardClickHandler = (ev, id) => {\r\n    if (ev.target.tagName === \"IMG\") {\r\n      this.setState({ showFull: true, clickedImg: id });\r\n    } else if (ev.target.className.includes(\"fa-bookmark\")) {\r\n      this.setState((prev) => {\r\n        return {\r\n          recent: [...prev.recent, id],\r\n        };\r\n      });\r\n      if (!this.state.favourites.includes(id)) {\r\n        this.setState((prev) => {\r\n          return {\r\n            favourites: [...prev.favourites, id],\r\n            notifications: [...prev.notifications, { id, type: \"added\" }],\r\n          };\r\n        });\r\n      } else {\r\n        this.setState(\r\n          (prevState) =>\r\n            prevState.favourites.splice(\r\n              prevState.favourites.findIndex((fav) => fav === id),\r\n              1\r\n            ),\r\n          () => {\r\n            return this.state.favourites.length\r\n              ? null\r\n              : this.setState({ showFavs: false });\r\n          }\r\n        );\r\n        this.setState((prevState) => {\r\n          return {\r\n            notifications: [\r\n              ...prevState.notifications,\r\n              { id, type: \"removed\" },\r\n            ],\r\n          };\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  closeFull = () => {\r\n    this.setState({ showFull: false });\r\n  };\r\n\r\n  navItemHandler = (id) => {\r\n    this.setState({ showFavs: id ? true : false });\r\n  };\r\n\r\n  handleSelected = (selected) => {\r\n    this.setState({ sortBy: selected });\r\n  };\r\n  handleNotif = (bool) => {\r\n    this.setState({ recent: [] });\r\n    if (bool)\r\n      this.setState((prev) => {\r\n        return {\r\n          ...prev,\r\n          showDrop: !prev.showDrop,\r\n        };\r\n      });\r\n  };\r\n  handleDelete = () => {\r\n    this.setState({ notifications: [] });\r\n  };\r\n\r\n  toggleMode = () => {\r\n    this.setState({\r\n      mode: this.state.mode === \"light\" ? \"dark\" : \"light\",\r\n    });\r\n  };\r\n  render() {\r\n    let monsters = [...this.state.monsters];\r\n    const {\r\n      showFavs,\r\n      searchField,\r\n      favourites,\r\n      sortBy,\r\n      notifications,\r\n      recent,\r\n      showDrop,\r\n      clickedImg,\r\n      mode,\r\n    } = this.state;\r\n    switch (sortBy) {\r\n      case \"a-z\":\r\n        monsters = monsters.sort((a, b) =>\r\n          a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n        );\r\n        break;\r\n      case \"z-a\":\r\n        monsters = monsters.sort((a, b) =>\r\n          b.name > a.name ? 1 : a.name > b.name ? -1 : 0\r\n        );\r\n        break;\r\n      default:\r\n        monsters = this.state.monsters;\r\n    }\r\n    const notifs = notifications.reduce((acc, cur) => {\r\n      for (let monster of monsters) {\r\n        if (monster.id === cur.id) {\r\n          acc.unshift({ ...monster, type: cur.type });\r\n        }\r\n      }\r\n      return acc;\r\n    }, []);\r\n    const myFav = monsters.filter((monster) => favourites.includes(monster.id));\r\n    const whereToSearch = showFavs ? myFav : monsters;\r\n    const filteredMonsters = whereToSearch.filter((monster) =>\r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n    const appMode = mode === \"light\" ? \"App\" : \"App app-dark\";\r\n    return (\r\n      <div className={appMode}>\r\n        <BrowserRouter>\r\n          {this.state.showFull && (\r\n            <FullSize closeFull={this.closeFull} clickedImg={clickedImg} />\r\n          )}\r\n          <PopUp showPopUp={favourites.length} />\r\n          <NotifsContext.Provider value={{ added: notifs, showDrop }}>\r\n            <NavBar\r\n              navItems={[\"Monsters\", \"Favourites\"]}\r\n              clicked={(id) => this.navItemHandler(id)}\r\n              handleNotif={(bool) => this.handleNotif(bool)}\r\n              recentNotif={recent}\r\n              deleteHandler={this.handleDelete}\r\n              mode={mode}\r\n              toggleMode={this.toggleMode}\r\n            />\r\n          </NotifsContext.Provider>\r\n          <h1 ref={this.h1Ref}>Monster Rolodex</h1>\r\n          <SearchBox\r\n            placeholder=\"Search Monster\"\r\n            handleChange={this.handleChange}\r\n          />\r\n          <DropDownMenu selected={(val) => this.handleSelected(val)} />\r\n          <Switch>\r\n            <Route path=\"/Monsters/:id\">\r\n              <FullCardInfo monster={monsters} />\r\n            </Route>\r\n            <Route path=\"/Favourites\">\r\n              <ModeContext.Provider value={mode}>\r\n                <CardList\r\n                  clicked={(ev, id) => this.cardClickHandler(ev, id)}\r\n                  monsters={myFav}\r\n                  myFav={favourites}\r\n                />\r\n              </ModeContext.Provider>\r\n            </Route>\r\n            <Route path=\"/\">\r\n              {filteredMonsters.length > 0 ? (\r\n                <ModeContext.Provider value={mode}>\r\n                  <CardList\r\n                    clicked={(ev, id) => this.cardClickHandler(ev, id)}\r\n                    monsters={filteredMonsters}\r\n                    myFav={favourites}\r\n                  />\r\n                </ModeContext.Provider>\r\n              ) : (\r\n                <p className=\"error\">Username Doesn't Exist</p>\r\n              )}\r\n            </Route>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}